{"ast":null,"code":"import { TOTAL_SCREENS } from './commonUtils';\nimport { Subject } from 'rxjs';\nexport default class ScrollService {\n  constructor() {\n    this.scrollToHireMe = () => {\n      let ccontactmeScreen = document.getElementById(\"Contact Me\");\n      if (!ccontactMeScreen) return;\n      ccontactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClinetRect();\n      let elementTop = rec.top;\n      let elementBottom = rec.Bottom;\n      let partiallyVisible = elementTop < window.innerHeight && elementBottom >= 0;\n      let completelyVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\n\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n\n        case \"complete\":\n          return completelyVisible;\n\n        default:\n          return false;\n      }\n    };\n\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || Object.keys(event).length < 1) return;\n\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if (!screenFromDOM) continue;\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen[\"alreadyRendered\"] = true;\n            break;\n          }\n\n          if (fullyVisible) {\n            ScrollService.currentScreenBroadCaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n\n    window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\n  }\n\n}\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"sources":["/Users/alexanderdavis/Desktop/gtech_react_profile/client/src/utilities/ScrollService.js"],"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","scrollToHireMe","ccontactmeScreen","document","getElementById","ccontactMeScreen","scrollIntoView","behavior","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClinetRect","elementTop","top","elementBottom","Bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","Object","keys","length","screen","screenFromDOM","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadCaster","screenInView","addEventListener","scrollHandler"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,eAA5B;AACA,SAAQC,OAAR,QAAsB,MAAtB;AAGA,eAAe,MAAMC,aAAN,CAAmB;AAQ9BC,EAAAA,WAAW,GAAG;AAAA,SAIdC,cAJc,GAIG,MAAK;AACtB,UAAIC,gBAAgB,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAvB;AACA,UAAG,CAACC,gBAAJ,EAAsB;AACtBA,MAAAA,gBAAgB,CAACC,cAAjB,CAAgC;AAACC,QAAAA,QAAQ,EAAE;AAAX,OAAhC;AACC,KARa;;AAAA,SASdC,YATc,GASC,MAAK;AACpB,UAAIC,UAAU,GAAGN,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAjB;AACA,UAAG,CAACK,UAAJ,EAAgB;AAChBA,MAAAA,UAAU,CAACH,cAAX,CAA0B;AAACC,QAAAA,QAAQ,EAAE;AAAX,OAA1B;AACC,KAba;;AAAA,SAedG,eAfc,GAeI,CAACC,IAAD,EAAMC,IAAN,KAAc;AAC5B,UAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAL,EAAV;AACA,UAAIC,UAAU,GAAGF,GAAG,CAACG,GAArB;AACA,UAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAxB;AAEA,UAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAApB,IAAmCJ,aAAa,IAAG,CAA1E;AACA,UAAIK,iBAAiB,GAAGP,UAAU,IAAG,CAAb,IAAkBE,aAAa,IAAGG,MAAM,CAACC,WAAjE;;AAEA,cAAOT,IAAP;AACI,aAAK,SAAL;AACA,iBAAOO,gBAAP;;AAEA,aAAK,UAAL;AACA,iBAAOG,iBAAP;;AACA;AACI,iBAAO,KAAP;AAPR;AASH,KAhCa;;AAAA,SAkCdC,+BAlCc,GAkCqBC,KAAD,IAAU;AACxC,UAAI,CAACA,KAAD,IAAUC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,GAA4B,CAA1C,EACA;;AACA,WAAK,IAAIC,MAAT,IAAmB/B,aAAnB,EAAiC;AAC7B,YAAIgC,aAAa,GAAG1B,QAAQ,CAACC,cAAT,CAAwBwB,MAAM,CAACE,WAA/B,CAApB;AACA,YAAI,CAACD,aAAL,EACA;AAGA,YAAIE,YAAY,GAAG,KAAKrB,eAAL,CAAqBmB,aAArB,EAAoC,UAApC,CAAnB;AACA,YAAIV,gBAAgB,GAAG,KAAKT,eAAL,CAAqBmB,aAArB,EAAoC,SAApC,CAAvB;;AAEA,YAAGE,YAAY,IAAIZ,gBAAnB,EAAoC;AAChC,cAAGA,gBAAgB,IAAI,CAACS,MAAM,CAACI,eAA/B,EAA+C;AAC3CjC,YAAAA,aAAa,CAACkC,mBAAd,CAAkCC,IAAlC,CAAuC;AACnCC,cAAAA,YAAY,EAAEP,MAAM,CAACE;AADc,aAAvC;AAGAF,YAAAA,MAAM,CAAC,iBAAD,CAAN,GAA4B,IAA5B;AACA;AACH;;AACD,cAAGG,YAAH,EAAgB;AACZhC,YAAAA,aAAa,CAACqC,wBAAd,CAAuCF,IAAvC,CAA4C;AACxCG,cAAAA,YAAY,EAACT,MAAM,CAACE;AADoB,aAA5C;AAGA;AACH;AACJ;AACJ;AACJ,KA9Da;;AACVV,IAAAA,MAAM,CAACkB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKf,+BAAvC;AACH;;AAV6B;AAAbxB,a,CACVwC,a,GAAgB,IAAIxC,aAAJ,E;AADNA,a,CAIVqC,wB,GAA2B,IAAItC,OAAJ,E;AAJjBC,a,CAKVkC,mB,GAAsB,IAAInC,OAAJ,E","sourcesContent":["import {TOTAL_SCREENS} from './commonUtils'\nimport {Subject} from 'rxjs'\n\n\nexport default class ScrollService{\n    static scrollHandler = new ScrollService();\n\n\n    static currentScreenBroadCaster = new Subject()\n    static currentScreenFadeIn = new Subject()\n\n\n    constructor() {\n        window.addEventListener('scroll', this.checkCurrentScreenUnderViewport);\n    }\n\n    scrollToHireMe = ()=> { \n    let ccontactmeScreen = document.getElementById(\"Contact Me\")\n    if(!ccontactMeScreen) return;\n    ccontactMeScreen.scrollIntoView({behavior: \"smooth\"})\n    }\n    scrollToHome = ()=> { \n    let homeScreen = document.getElementById(\"Home\")\n    if(!homeScreen) return\n    homeScreen.scrollIntoView({behavior: \"smooth\"})\n    }\n    \n    isElementInView = (elem,type) =>{\n        let rec = elem.getBoundingClinetRect();\n        let elementTop = rec.top;\n        let elementBottom = rec.Bottom;\n\n        let partiallyVisible = elementTop < window.innerHeight && elementBottom >=0;\n        let completelyVisible = elementTop >=0 && elementBottom <=window.innerHeight;\n\n        switch(type){\n            case \"partial\":\n            return partiallyVisible\n\n            case \"complete\":\n            return completelyVisible\n            default: \n                return false\n        }\n    }\n\n    checkCurrentScreenUnderViewport = (event)=> {\n        if (!event || Object.keys(event).length < 1)\n        return;\n        for (let screen of TOTAL_SCREENS){\n            let screenFromDOM = document.getElementById(screen.screen_name);\n            if (!screenFromDOM)\n            continue;\n\n\n            let fullyVisible = this.isElementInView(screenFromDOM, \"complete\")\n            let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\")\n\n            if(fullyVisible || partiallyVisible){\n                if(partiallyVisible && !screen.alreadyRendered){\n                    ScrollService.currentScreenFadeIn.next({\n                        fadeInScreen: screen.screen_name\n                    });\n                    screen[\"alreadyRendered\"] = true\n                    break;\n                }\n                if(fullyVisible){\n                    ScrollService.currentScreenBroadCaster.next({\n                        screenInView:screen.screen_name\n                    });\n                    break;\n                }\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}